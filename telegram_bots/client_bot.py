import os
import django
from django.conf import settings

if not settings.configured:
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
    django.setup()

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters
)
from studios.models import Room
from bookings.models import TimeSlot, Booking  # –ò–º–ø–æ—Ä—Ç –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from clients.models import Client
import datetime
import logging
from django.utils import timezone

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
SELECT_ROOM, SELECT_DATE, SELECT_SLOT, ENTER_NAME, ENTER_PHONE = range(5)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ª –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/book - –ù–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "/mybookings - –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
    )


async def book_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rooms = Room.objects.all()
    if not rooms:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ª–æ–≤.")
        return ConversationHandler.END

    keyboard = []
    for room in rooms:
        keyboard.append([InlineKeyboardButton(room.name, callback_data=f"room_{room.id}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)

    return SELECT_ROOM


async def select_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    room_id = int(query.data.split("_")[1])
    context.user_data['room_id'] = room_id

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    today = timezone.now().date()
    dates = [
        today,
        today + datetime.timedelta(days=1),
        today + datetime.timedelta(days=2),
        today + datetime.timedelta(days=3),
        today + datetime.timedelta(days=4),
    ]

    keyboard = []
    for date in dates:
        keyboard.append([InlineKeyboardButton(date.strftime("%d.%m.%Y"), callback_data=f"date_{date}")])

    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=reply_markup)

    return SELECT_DATE


async def select_slot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    selected_date = datetime.datetime.strptime(query.data.split("_")[1], "%Y-%m-%d").date()
    context.user_data['selected_date'] = selected_date

    room_id = context.user_data['room_id']
    room = Room.objects.get(id=room_id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
    slots = TimeSlot.objects.filter(
        room=room,
        date=selected_date,
        status='free'
    ).order_by('start_time')

    if not slots:
        await query.edit_message_text("–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        return ConversationHandler.END

    keyboard = []
    for slot in slots:
        time_str = f"{slot.start_time.strftime('%H:%M')}-{slot.end_time.strftime('%H:%M')}"
        keyboard.append([InlineKeyboardButton(time_str, callback_data=f"slot_{slot.id}")])

    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {room.name} –Ω–∞ {selected_date.strftime('%d.%m.%Y')}:",
                                  reply_markup=reply_markup)

    return SELECT_SLOT


async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    slot_id = int(query.data.split("_")[1])
    context.user_data['slot_id'] = slot_id

    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
    return ENTER_NAME


async def enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:")
    return ENTER_PHONE


async def complete_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    name = context.user_data['name']
    slot_id = context.user_data['slot_id']

    slot = TimeSlot.objects.get(id=slot_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    client, created = Client.objects.get_or_create(
        phone=phone,
        defaults={'name': name}
    )

    # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    booking = Booking.objects.create(
        timeslot=slot,
        client=client,
        group_name=name,
        phone=phone,
        status='pending'
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞
    slot.status = 'booked'
    slot.save()

    await update.message.reply_text(
        f"‚úÖ –ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
        f"–ó–∞–ª: {slot.room.name}\n"
        f"–î–∞—Ç–∞: {slot.date.strftime('%d.%m.%Y')}\n"
        f"–í—Ä–µ–º—è: {slot.start_time.strftime('%H:%M')}-{slot.end_time.strftime('%H:%M')}\n"
        f"–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: #{booking.id}\n\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


async def my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


def main():
    if not settings.TELEGRAM_BOT_TOKEN:
        logger.error("Telegram bot token not configured")
        return

    application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mybookings
    application.add_handler(CommandHandler("mybookings", my_bookings))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('book', book_start)],
        states={
            SELECT_ROOM: [CallbackQueryHandler(select_date, pattern='^room_')],
            SELECT_DATE: [CallbackQueryHandler(select_slot, pattern='^date_')],
            SELECT_SLOT: [CallbackQueryHandler(enter_name, pattern='^slot_')],
            ENTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_phone)],
            ENTER_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, complete_booking)],
        },
        fallbacks=[CallbackQueryHandler(cancel, pattern='^cancel$')],
    )

    application.add_handler(conv_handler)

    logger.info("Client bot started")
    application.run_polling()


if __name__ == "__main__":
    main()